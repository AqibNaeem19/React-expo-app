import React, { useState, useContext } from 'react';
import { View, ActivityIndicator } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Formik } from 'formik';
import axios from 'axios';
import { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';
import KeyboardAvoidingWrapper from '../components/KeyboardAvoidingWrapper';
import AsyncStorage from '@react-native-async-storage/async-storage';
// Context for sharing authenticated user credentials. includes token
import { CredentialsContext } from '../components/CredentialsContext';

// importing Styled-components
import {
  InnerContainer,
  PageLogo,
  PageTitle,
  StyledContainer,
  SubTitle,
  StyledFormArea,
  LeftIcon,
  StyledInputLabel,
  StyledTextInput,
  RightIcon,
  StyledButton,
  ButtonText,
  MsgBox,
  Line,
  ExtraView,
  ExtraText,
  TextLink,
  TextLinkContent,
  Colors
} from '../components/styles';

const { brand, darkLight, primary } = Colors


const ForgotPassword = ({ navigation }) => {

  // Component states
  const [message, setMessage] = useState();
  const [messageType, setMessageType] = useState();

  // Function to handle the user login
  const handleLogin = (credentials, setSubmitting) => {
    // Clears the previous message
    handleMessage(null);
    const authLoginUrl = 'http://192.168.1.7:5000/user/reset-request'
    console.log(credentials);
    axios.post('http://192.168.1.7:5000/user/reset-request', credentials)
    .then((response) => {
      console.log(response.data)
      const result = response.data;
      const { message, status } = result;
      if (status !== 'SUCCESS') {
        handleMessage(message, status);
      }
      setSubmitting(false);

    })
    .catch(error => {
      if (error.response.data) {
        const { message, status } = error.response.data;
        handleMessage(message, status);
      } else{
        handleMessage("Request failed, Check your network");
      }
      setSubmitting(false);
    })
  }


  // Function to handle the success, failed messages when user try to login
  const handleMessage = (message, type = 'FAILED') => {
    setMessage(message);
    setMessageType(type);
  }


  // Main return of the component
  return (
    <KeyboardAvoidingWrapper>

      <StyledContainer>
        <StatusBar style="auto" />
        <InnerContainer>
          <PageLogo passFor={true} resizeMode="cover" source={require('../assets/img/passwordForgot.png')} />
          <PageTitle>Reset Password</PageTitle>
          
          <Formik
            initialValues={{ email: '' }}
            onSubmit={(values, { setSubmitting }) => {
              // Validating for empty fields
              if (values.email == '') {
                handleMessage("Email is required");
                setSubmitting(false);
              } else {
                handleLogin(values, setSubmitting);
              }
            }}
          >
            {({ handleChange, handleBlur, handleSubmit, values, isSubmitting }) => (<StyledFormArea>
              <MyTextInput
                label="Email Address"
                icon="mail"
                placeholder="abc@gmail.com"
                placeholderTextColor={darkLight}
                onChangeText={handleChange('email')}
                onBlur={handleBlur('email')}
                value={values.email}
                keyboardType="email-address"
              />
              <MsgBox type={messageType}>{message}</MsgBox>

              {!isSubmitting &&
                <StyledButton onPress={handleSubmit}>
                  <ButtonText>Send reset code</ButtonText>
                </StyledButton>
              }

              {isSubmitting &&
                <StyledButton disabled={true}>
                  <ActivityIndicator size="large" color={primary} />
                </StyledButton>
              }

              <Line />
            </StyledFormArea>
            )}

          </Formik>
        </InnerContainer>
      </StyledContainer>
    </KeyboardAvoidingWrapper>
  )
}

const MyTextInput = ({ label, icon, isPassword, hidePassword, setHidePassword, ...props }) => {
  return (
    <View>
      <LeftIcon>
        <Octicons name={icon} size={30} color={brand} />
      </LeftIcon>
      <StyledInputLabel>{label}</StyledInputLabel>
      <StyledTextInput {...props} />
      {isPassword && (
        <RightIcon onPress={() => setHidePassword(!hidePassword)}>
          <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkLight} />
        </RightIcon>
      )}
    </View>
  )
}

export default ForgotPassword;